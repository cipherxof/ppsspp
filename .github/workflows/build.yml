name: Build

on:
  push:
    branches:
    - master
    # For testing.
    - actions
    tags:
      - "v*.*"
    paths-ignore:
    - '*.{txt,md}'
    - 'Tools/**'
    - '.{editorconfig,gitattributes,gitignore}'
    - 'appveyor.yml'
  pull_request:
    branches:
    - master
    paths-ignore:
    - '*.{txt,md}'
    - 'Tools/**'
    - '.{editorconfig,gitattributes,gitignore}'
    - 'appveyor.yml'

env:
  BUILD_CONFIGURATION: Release

jobs:
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]

    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@6fb02220983dee41ce7ae257b6f4d8f9bf5ed4ce # v2.0.0

    - name: Check Valid Version Tags
      id: valid-tags
      shell: bash
      run: |
        # This is required for git describe --always to work for git-version.cpp.
        git fetch --deepen=15000 --no-recurse-submodules --tags || exit 0
        echo "count=$(git tag -l 'v[0-9]*' | wc -l | tr -d ' ')" >> $GITHUB_OUTPUT # $env:GITHUB_OUTPUT on pwsh

    - name: Fetch upstream tags # Fallback to fetching tags from upstream
      if: steps.valid-tags.outputs.count == '0'
      run: |
        # TODO: should try to fetch tags from whereever this repo was forked from before fetching from official repo
        git remote add upstream https://github.com/hrydgard/ppsspp.git
        git fetch --deepen=15000 --no-recurse-submodules --tags upstream || exit 0

    - name: Create git-version.cpp for Windows # Not sure why the one at git-version-gen.cmd couldn't get the version properly.
      #if: github.ref_type == 'tag'
      run: |
        $GIT_VERSION=git describe --always --tags
        echo "Test GitVer = ${{ github.ref_name }} / $GIT_VERSION / ${GITHUB_REF_NAME}"
        echo "const char *PPSSPP_GIT_VERSION = `"$GIT_VERSION`";" > git-version.cpp
        echo "#define PPSSPP_GIT_VERSION_NO_UPDATE 1" >> git-version.cpp
        
        # Generate Windows/win-version.h too.
        $WIN_VERSION_COMMA=$GIT_VERSION -replace '^v', '' -replace '-g[0-9a-f]+$', '' -replace '[-\.]', ','
        echo "Test WinVer = $WIN_VERSION_COMMA"
        echo "#define PPSSPP_WIN_VERSION_STRING `"$GIT_VERSION`"" > Windows/win-version.h
        echo "#define PPSSPP_WIN_VERSION_COMMA $WIN_VERSION_COMMA" >> Windows/win-version.h
        echo "#define PPSSPP_WIN_VERSION_NO_UPDATE 1" >> Windows/win-version.h
        
    - name: Build Windows
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: msbuild /m /p:TrackFileAccess=false /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=${{ matrix.platform }} Windows/PPSSPP.sln

    - name: Package build
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: |
        mkdir ppsspp
        cp PPSSPP*.exe ppsspp/
        cp *.pdb ppsspp/
        cp Windows/*.bat ppsspp/
        cp -r assets ppsspp/assets

    - name: Package headless (non-Win32)
      if: matrix.platform != 'Win32'
      run: cp Windows/${{ matrix.platform }}/Release/*.exe ppsspp/

    - name: Package headless (Win32)
      if: matrix.platform == 'Win32'
      run: cp Windows/Release/*.exe ppsspp/

    - name: Upload build
      uses: actions/upload-artifact@v4
      with:
        name: Windows ${{ matrix.platform }} build
        path: ppsspp/

    - name: Create release
      if: github.ref_type == 'tag'
      working-directory: ${{ env.GITHUB_WORKSPACE }}
      run: |
        rm ppsspp/PPSSPPHeadless*
        rm ppsspp/UnitTest*
        rm ppsspp/*.pdb
        mkdir releases
        Compress-Archive -Path "ppsspp/*" -Update -DestinationPath "releases/PPSSPP-${{ github.ref_name }}-Windows-${{ matrix.platform }}.zip"

    - name: Upload release
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      if: github.ref_type == 'tag'
      with:
        files: releases/*.zip